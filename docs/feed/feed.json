{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "stinky.blog",
	"language": "en",
	"home_page_url": "https://stinky.blog/",
	"feed_url": "https://stinky.blog/feed/feed.json",
	"description": "brain of brian. notes about fun things i&#39;m learning",
	"author": {
		"name": "Brian",
		"url": "https://stinky.blog/about-me/"
	},
	"items": [
		{
			"id": "https://stinky.blog/blog/adios-wordpress/",
			"url": "https://stinky.blog/blog/adios-wordpress/",
			"title": "Adios Wordpress?",
			"content_html": "<p>Welcome to my first post on a static site.  Wordpress has been super cool, but I really wanted to try out something simpler and easier to deploy from the commandline.</p>\n<p>It has been a blast hosting the blog on the VPS and learning the ins-and-outs of securing the server, managing the certificates, and general wordpress admin stuff.  Wordpress plugins have been very awesome and easy to use, even the free ones.  However, it's just a ton of functionality that I don't really need.</p>\n<p>I watched a couple of youtube videos about hosting static sites on github pages with jekyll and other static site generators.  That led me to trying out a few of them before landing on this one, eleventy.</p>\n<p>To get this running, I created a github repository: username.github.io</p>\n<p>Then, I cloned the repo to my home folder</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/brianm88/brianm88.github.io</code></pre>\n<p>I used this eleventy template: <a href=\"https://github.com/11ty/eleventy-base-blog\">eleventy-base-blog</a></p>\n<p>Cloned those files to my github folder and ran eleventy:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">npx @11ty/eleventy <span class=\"token parameter variable\">--serve</span></code></pre>\n<p>There I had a working skeleton!  But, I wanted a search bar.  So I found a solution with pagefind: <a href=\"https://pagefind.app/\">pagefind</a></p>\n<p>Pretty much just need to insert this line into one of the pages to get it working.  In my case, inserted it in to /my-repo/_includes/layouts/home.njk</p>\n<pre class=\"language-http\" tabindex=\"0\"><code class=\"language-http\">&lt;link href=\"/pagefind/pagefind-ui.css\" rel=\"stylesheet\">\n&lt;script src=\"/pagefind/pagefind-ui.js\">&lt;/script>\n&lt;div id=\"search\">&lt;/div>\n&lt;script>\n    window.addEventListener('DOMContentLoaded', (event) => {\n        new PagefindUI({ element: \"#search\", showSubResults: true });\n    });\n&lt;/script></code></pre>\n<p>Then, you need to run the indexer to let it build an index of your site files.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">npx <span class=\"token parameter variable\">-y</span> pagefind <span class=\"token parameter variable\">--site</span> _site</code></pre>\n<p>Then I had some weird issues getting github pages to let me select the right folder.  So, I created a /docs/ folder like they suggest, and I just rsynced the stuff into it.  I wrote this into a script so I can execute all this in one command.  The script also takes a commit comment and pushes to github:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">set</span> <span class=\"token parameter variable\">-e</span>\n\n<span class=\"token comment\"># 11ty build</span>\nnpx @11ty/eleventy\n\n<span class=\"token comment\"># pagefind build index</span>\nnpx <span class=\"token parameter variable\">-y</span> pagefind <span class=\"token parameter variable\">--site</span> _site/\n\n<span class=\"token comment\"># rsync to gitpages folder</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-arui</span> _site/ docs\n\n<span class=\"token comment\"># Prompt for commit message</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Enter commit message:\"</span>\n<span class=\"token builtin class-name\">read</span> commit_message\n\n<span class=\"token comment\"># git operations</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> docs\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"<span class=\"token variable\">$commit_message</span>\"</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin main</code></pre>\n",
			"date_published": "2024-03-03T00:00:00Z"
		}
		,
		{
			"id": "https://stinky.blog/blog/pmx-qbit-wg-lxc/",
			"url": "https://stinky.blog/blog/pmx-qbit-wg-lxc/",
			"title": "Proxmox + Qbittorrent + Wireguard + Samba LXC",
			"content_html": "<p>A google search for how to create this type of container will bring up a bunch of malarkey. It doesn’t have to be that complicated. You can set this up in a few minutes super easily. The result is an extremely lightweight and effective torrent box that you can control remotely. It works great on very modest hardware even with lots of traffic flowing.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://stinky.blog/img/0p3kt2JHsC-579.avif 579w\"><source type=\"image/webp\" srcset=\"https://stinky.blog/img/0p3kt2JHsC-579.webp 579w\"><img alt=\"container info\" loading=\"lazy\" decoding=\"async\" src=\"https://stinky.blog/img/0p3kt2JHsC-579.jpeg\" width=\"579\" height=\"346\"></picture></p>\n<h2 id=\"first-spin-up-a-container\" tabindex=\"-1\">First, spin up a container. <a class=\"header-anchor\" href=\"https://stinky.blog/blog/pmx-qbit-wg-lxc/\">#</a></h2>\n<p><picture><source type=\"image/avif\" srcset=\"https://stinky.blog/img/RQSkXuO37I-791.avif 791w\"><source type=\"image/webp\" srcset=\"https://stinky.blog/img/RQSkXuO37I-791.webp 791w\"><img alt=\"container creation\" loading=\"lazy\" decoding=\"async\" src=\"https://stinky.blog/img/RQSkXuO37I-791.jpeg\" width=\"791\" height=\"387\"></picture></p>\n<p>Click on the local storage of one of your nodes, go to container templates, and click the Templates button. I am using the ubuntu 22.10-standard template, only 129mb.</p>\n<p>After downloading the template, right click your node and create the container. On the first page, make sure to uncheck ‘unprivileged container’ so that we will have full write access to the samba share. If you are storing files some other way, you can leave it unprivileged. (You can also achieve write access to cifs shares with an unprivileged container through user mapping if you so choose.)</p>\n<p>Select the ubuntu template on the next page. I went with the defaults for all the other options except 2 cpu cores and a static IP address.</p>\n<h2 id=\"start-the-container\" tabindex=\"-1\">Start the container! <a class=\"header-anchor\" href=\"https://stinky.blog/blog/pmx-qbit-wg-lxc/\">#</a></h2>\n<p>Now we can start the container and do some stuff.</p>\n<p>First, login with username root and the password you set during creation. Update everything with</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">apt</span> upgrade <span class=\"token parameter variable\">-y</span></code></pre>\n<p>Then, we need to install a few things</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">apt</span> <span class=\"token function\">install</span> wireguard wireguard-tools <span class=\"token function\">curl</span> qbittorrent-nox cifs-utils iftop</code></pre>\n<p>Since we installed cifs-utils in the last step, let’s go ahead and mount the network share. Edit your fstab file:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">nano</span> /etc/fstab</code></pre>\n<p>I have created a user on my NAS named qbit for this service and added it to the samba permissions. It only has access to a folder for downloads. My fstab looks kinda like this:</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://stinky.blog/img/oxosvwo3TL-875.avif 875w\"><source type=\"image/webp\" srcset=\"https://stinky.blog/img/oxosvwo3TL-875.webp 875w\"><img alt=\"fstab config\" loading=\"lazy\" decoding=\"async\" src=\"https://stinky.blog/img/oxosvwo3TL-875.jpeg\" width=\"875\" height=\"79\"></picture></p>\n<p><strong>ctrl + X</strong> to save, then type <strong>reboot</strong>.</p>\n<p>The share should mount on reboot. If not, check for errors with <strong>journalctl -b</strong></p>\n<h2 id=\"let-s-dig-a-wireguard-tunnel\" tabindex=\"-1\">Let’s dig a wireguard tunnel <a class=\"header-anchor\" href=\"https://stinky.blog/blog/pmx-qbit-wg-lxc/\">#</a></h2>\n<p>Now you need to log into your VPN provider of choice and download your wireguard configuration. One easy way to do this would be to drop it on your NAS if you have connected one in the last step.</p>\n<p>Navigate to wherever you put that config file so we can move it to its final resting place. Below, mine is named wireguard-vpn.conf:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">mv</span> wireguard-vpn.conf /etc/wireguard/wireguard-vpn.conf <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> /etc/wireguard <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">ls</span></code></pre>\n<p>Let’s see if that bad boy works:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">wg-quick up wireguard-vpn</code></pre>\n<p><picture><source type=\"image/avif\" srcset=\"https://stinky.blog/img/qBkKeZntks-836.avif 836w\"><source type=\"image/webp\" srcset=\"https://stinky.blog/img/qBkKeZntks-836.webp 836w\"><img alt=\"wireguard output\" loading=\"lazy\" decoding=\"async\" src=\"https://stinky.blog/img/qBkKeZntks-836.jpeg\" width=\"836\" height=\"333\"></picture></p>\n<p>If you connected successfully, typing <strong>ip addr show</strong> will list a new tunnel interface at the bottom with your VPN IP!</p>\n<p>Now make it reconnect automatically on reboot:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">systemctl <span class=\"token builtin class-name\">enable</span> wg-quick@wireguard-vpn</code></pre>\n<p>Reboot and hit it with another <strong>ip addr show</strong> to make sure we’re still connected to the tunnel!</p>\n<h2 id=\"enable-qbittorrent-nox\" tabindex=\"-1\">Enable qbittorrent-nox <a class=\"header-anchor\" href=\"https://stinky.blog/blog/pmx-qbit-wg-lxc/\">#</a></h2>\n<p>We’re on the home stretch! Now make a service that will start qbittorrent-nox automatically on boot:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">nano</span> /etc/systemd/system/qbittorrent-nox.service</code></pre>\n<p>We’ll keep it super simple:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>Unit<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">Description</span><span class=\"token operator\">=</span>qBittorrent-nox <span class=\"token function\">service</span>\n<span class=\"token assign-left variable\">Documentation</span><span class=\"token operator\">=</span>man:qbittorrent-nox<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token assign-left variable\">Wants</span><span class=\"token operator\">=</span>network-online.target\n<span class=\"token assign-left variable\">After</span><span class=\"token operator\">=</span>network-online.target nss-lookup.target\n\n<span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">Type</span><span class=\"token operator\">=</span>exec\n<span class=\"token assign-left variable\">ExecStart</span><span class=\"token operator\">=</span>/usr/bin/qbittorrent-nox\n\n<span class=\"token punctuation\">[</span>Install<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">WantedBy</span><span class=\"token operator\">=</span>multi-user.target</code></pre>\n<p>Now enable it and reboot to see if it works:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">systemctl <span class=\"token builtin class-name\">enable</span> qbittorrent-nox <span class=\"token operator\">&amp;&amp;</span> systemctl daemon-reload <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">reboot</span></code></pre>\n<p>Did it work?? You can try it by opening your web browser and typing in the local IP of the machine followed by port 8080!</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://stinky.blog/img/WX1esYhBMp-759.avif 759w\"><source type=\"image/webp\" srcset=\"https://stinky.blog/img/WX1esYhBMp-759.webp 759w\"><img alt=\"working qbit interface\" loading=\"lazy\" decoding=\"async\" src=\"https://stinky.blog/img/WX1esYhBMp-759.jpeg\" width=\"759\" height=\"577\"></picture></p>\n<h2 id=\"bind-qbt-nox-to-wireguard-interface\" tabindex=\"-1\">Bind Qbt-nox to wireguard interface <a class=\"header-anchor\" href=\"https://stinky.blog/blog/pmx-qbit-wg-lxc/\">#</a></h2>\n<p>Last step! Go to <strong>Tools -&gt; Options -&gt; Advanced</strong> and set the client to ONLY use the wireguard tunnel that we have created. If your VPN provides you a static IP, you can optionally set the client to ONLY use this IP as well.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://stinky.blog/img/Ytfrprzav2-837.avif 837w\"><source type=\"image/webp\" srcset=\"https://stinky.blog/img/Ytfrprzav2-837.webp 837w\"><img alt=\"bind to wireguard\" loading=\"lazy\" decoding=\"async\" src=\"https://stinky.blog/img/Ytfrprzav2-837.jpeg\" width=\"837\" height=\"969\"></picture></p>\n<p>Now set your download folder to your samba share in the Downloads tab.</p>\n<p>That’s it! Now you can log in through this web interface from now on. You never have to access the container directly again. Add torrents by copying and pasting the magnet links into the webui from your phone or any other device!</p>\n<p>Ensure that traffic is flowing through the wireguard tunnel as expected by running the <strong>iftop</strong> utility we downloaded earlier.</p>\n",
			"date_published": "2022-12-01T00:00:00Z"
		}
		
	]
}
